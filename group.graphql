type Addon implements Node {
  addonType: String!
  attachOn: AttachOn!
  id: ID!
  metadata: Map
  priority: Int!
  serviceIds: [String!]!
  title: String!
  variants: [AddonVariant!]!
}

type AddonVariant {
  cost: Price
  metadata: Map
  title: String!
}

type Address {
  country: String!
  latitude: Float!
  locality: String!
  longitude: Float!
  postalCode: String!
  region: String!
  streetAddress: String!
}

input AddressInput {
  country: String
  latitude: Float
  locality: String
  longitude: Float
  postalCode: String
  region: String
  streetAddress: String
}

type Appointment implements Node {
  bookingId: String!
  customers: [Customer!]!
  id: ID!
  resources: [Resource!]!
  service: Service
  serviceProviders: ServiceProvider
  status: AppointmentStatus!
  timeSlot: Timeslot
}

input AppointmentChannelInput {
  id: ID
  name: String
}

input AppointmentCustomerInput {
  email: String
  firstName: String
  id: ID
  language: String
  lastName: String
  status: CustomerStatus
  timezone: String
}

input AppointmentInput {
  bookingId: String
  channel: AppointmentChannelInput
  customer: [AppointmentCustomerInput]
  id: ID
  resources: [AppointmentResourceInput]
  service: AppointmentServiceInput
  serviceProvider: AppointmentServiceProviderInput
  status: AppointmentStatus
  timeSlot: TimeslotInput
}

type AppointmentNode {
  node: Appointment
  position: String!
}

input AppointmentResourceInput {
  id: ID
  title: String
}

input AppointmentServiceInput {
  id: ID
  title: Map
}

input AppointmentServiceProviderInput {
  email: String
  firstName: String
  id: ID
  lastName: String
}

enum AppointmentStatus {
  APPOINTMENT_CANCELLED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_STATUS_UNSPECIFIED
  APPOINTMENT_WAITING_FOR_APPROVAL
}

enum Approval {
  DO_NOT_REQUIRE
  REQUIRE
}

type AreaCode implements Node {
  description: String!
  enabled: Boolean!
  groupId: String!
  id: ID!
  metadata: Map
  priority: Int!
  shortName: String!
  title: String!
}

enum AttachOn {
  ORDER
  SERVICE
  UNSPECIFIED
}

union ResourceUnion = Resource | ServiceProvider

type BlockHourRule implements Node {
  id: ID!
  locale: String!
  metadata: Map
  reason: String!
  resource: ResourceUnion
  resourceId: String!
  slots: [BlockHourSlot!]!
  title: String!
}

input BlockHourRuleInput {
  id: ID
  locale: String
  metadata: Map
  reason: String
  resourceId: String
  slots: [BlockHourSlotInput]
  title: String
}

type BlockHourRuleNode {
  node: BlockHourRule
  position: String!
}

type BlockHourSlot {
  id: ID!
  slot: Timeslot
}

input BlockHourSlotInput {
  id: ID
  slot: TimeslotInput
}

type BookingApproval {
  emailVerifiedCustomer: Approval!
  phoneVerifiedCustomer: Approval!
  prePayingCustomer: Approval!
}

type BookingPortalSetting implements Node {
  customerInformation: [CustomerInformation!]!
  enableBookingPortal: Boolean!
  enableQuantityBooking: Boolean!
  enableRecurringBooking: Boolean!
  enabledLogins: [String!]!
  id: ID!
  removeBranding: Boolean!
  showAreaCode: Boolean!
  slotDurationForAdminCalendar: Int!
  staffPrioritization: StaffPrioritization!
  uISettings: String!
}

type BookingRules {
  allowedCountryCode: [String!]!
  bookingApproval: BookingApproval
  customerRestriction: [CustomerRestriction!]!
  domainRestrictions: [String!]!
  leadAndCancellationSetting: LeadAndCancellationSetting
}

scalar Bytes

type Category implements Node {
  description: String!
  id: ID!
  image: GalleryItem
  metadata: Map
  name: String!
  parentCategory: String!
  parentCategoryDetails: Category
}

input CategoryInput {
  description: String
  id: ID
  image: GalleryItemInput
  metadata: Map
  name: String
  parentCategory: String
}

type Channel implements Node {
  description: String!
  id: ID!
  metadata: Map
  name: String!
}

input ChannelInput {
  description: String
  id: ID
  metadata: Map
  name: String
}

type ChannelRestriction {
  channelId: String!
  durations: [Duration!]!
}

enum ChargeType {
  FIXED_AMOUNT
  FULL_AMOUNT
  PERCENTAGE
  UNSPECIFIED
}



type Class implements Node {
  active: Boolean!
  cancelReason: String!
  cancelledAt: Timestamp
  cancelledBy: String!
  categoryId: String!
  certificatesRequiredIds: [String!]!
  confirmedCapacity: Int!
  description: String!
  dropInAllowed: Boolean!
  gallery: Gallery
  id: ID!
  intervalInDays: Int!
  metadata: Map
  onlyFirstSessionSignup: Boolean!
  room: ClassRoom
  sessions: [Session!]!
  status: Status!
  templateId: String!
  termsConditions: String!
  title: String!
  until: Timestamp
  waitingCapacity: Int!
}

type ClassCustomer {
  dropReason: String!
  droppedBy: String!
  email: String!
  firstName: String!
  id: ID!
  isDropIn: Boolean!
  isDropInByPayments: Boolean!
  lastName: String!
  paymentStatus: CustomerPaymentStatus!
  status: ClassCustomerStatus!
}

enum ClassCustomerStatus {
  CANCELLED
  CONFIRMED
  WAITING
}

type ClassRoom {
  address: String!
  city: String!
  code: String!
  country: String!
  description: String!
  district: String!
  gallery: Gallery
  id: ID!
  latitude: Float!
  longitude: Float!
  metadata: Map
  name: String!
}

type ClassServiceProvider {
  email: String!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  link: String!
  metadata: Map
  phoneNumber: String!
  profileImage: GalleryItem
}

type ClassTemplate implements Node {
  active: Boolean!
  categoryId: String!
  certificatesRequiredIds: [String!]!
  confirmedCapacity: Int!
  description: String!
  dropInAllowed: Boolean!
  gallery: Gallery
  id: ID!
  intervalInDays: Int!
  metadata: Map
  onlyFirstSessionSignup: Boolean!
  room: ClassRoom
  sessions: [Session!]!
  status: Status!
  termsConditions: String!
  title: String!
  until: Timestamp
  waitingCapacity: Int!
}

type Company implements Node {
  appointments(
    after: String
    before: String
    first: Int
    last: Int
  ): ListAppointmentResponse
  description: String!
  displayName: String!
  emails: [String!]!
  gallery: Gallery
  id: ID!
  locations(
    after: String
    before: String
    first: Int
    last: Int
  ): ListLocationResponse
  preference: CompanyPreference
  profession: String!
  services(
    after: String
    before: String
    first: Int
    last: Int
  ): ListServiceResponse
  telephones: [String!]!
  title: String!
  website: String!
}

input CompanyInput {
  address: AddressInput
  description: String
  displayName: String
  emails: [String]
  gallery: GalleryInput
  id: ID
  preference: CompanyPreferenceInput
  profession: String
  telephones: [String]
  title: String
  website: String
}

type CompanyNode {
  node: Company
  position: String!
}

type CompanyPreference {
  currency: String!
  dateFormat: String!
  id: ID!
  language: String!
  timeFormat: String!
  timezone: String!
  uIInfo: String!
}

input CompanyPreferenceInput {
  currency: String
  dateFormat: String
  id: ID
  language: String
  timeFormat: String
  timezone: String
  uIInfo: String
}

input CreateAppointmentInput {
  appointment: createAppointmentRequestAppointment
  clientMutationId: String
  leaseId: createAppointmentRequestLeaseId
  parent: String
  validateOnly: Boolean
}

type CreateAppointmentPayload {
  clientMutationId: String!
  payload: Appointment
}

input createAppointmentRequestAppointment {
  appointment: AppointmentInput
}

input createAppointmentRequestLeaseId {
  leaseId: String
}

input CreateBlockHourRuleInput {
  clientMutationId: String
  locale: String
  metadata: Map
  parent: String
  reason: String
  recurrenceSet: [String]
  resourceId: String
  slotDurationInMinutes: Int
  title: String
}

type CreateBlockHourRulePayload {
  clientMutationId: String!
  payload: BlockHourRule
}

input CreateCategoryInput {
  category: CategoryInput
  clientMutationId: String
  parent: String
}

type CreateCategoryPayload {
  clientMutationId: String!
  payload: Category
}

input CreateChannelInput {
  channel: ChannelInput
  clientMutationId: String
  parent: String
}

type CreateChannelPayload {
  clientMutationId: String!
  payload: Channel
}

input CreateCompanyInput {
  clientMutationId: String
  company: CompanyInput
  parent: String
}

type CreateCompanyPayload {
  clientMutationId: String!
  payload: Company
}

input CreateCustomerInput {
  clientMutationId: String
  customer: CustomerInput
  parent: String
  userId: String
}

type CreateCustomerPayload {
  clientMutationId: String!
  payload: Customer
}

input CreateDepartmentInput {
  clientMutationId: String
  department: DepartmentInput
  parent: String
}

type CreateDepartmentPayload {
  clientMutationId: String!
  payload: Department
}

input CreateDesignationInput {
  clientMutationId: String
  designation: DesignationInput
  parent: String
}

type CreateDesignationPayload {
  clientMutationId: String!
  payload: Designation
}

input CreateGroupInput {
  clientMutationId: String
  group: GroupInput
}

type CreateGroupPayload {
  clientMutationId: String!
  payload: Group
}

input CreateLocationInput {
  clientMutationId: String
  location: LocationInput
  parent: String
}

type CreateLocationPayload {
  clientMutationId: String!
  payload: Location
}

input CreateResourceInput {
  clientMutationId: String
  parent: String
  resource: ResourceInput
}

type CreateResourcePayload {
  clientMutationId: String!
  payload: Resource
}

input CreateResourceTypeInput {
  clientMutationId: String
  parent: String
  resourceType: ResourceTypeInput
}

type CreateResourceTypePayload {
  clientMutationId: String!
  payload: ResourceType
}

input CreateServiceInput {
  clientMutationId: String
  parent: String
  service: ServiceInput
}

type CreateServicePayload {
  clientMutationId: String!
  payload: Service
}

input CreateServiceProviderDraftInput {
  clientMutationId: String
  parent: String
  serviceProviderDraft: ServiceProviderDraftInput
}

type CreateServiceProviderDraftPayload {
  clientMutationId: String!
  payload: ServiceProviderDraft
}

input CreateServiceProviderInput {
  clientMutationId: String
  parent: String
  serviceProvider: ServiceProviderInput
}

type CreateServiceProviderPayload {
  clientMutationId: String!
  payload: ServiceProvider
}

input CreateUserProfileInput {
  clientMutationId: String
  userProfile: UserProfileInput
}

type CreateUserProfilePayload {
  clientMutationId: String!
  payload: UserProfile
}

type Customer implements Node {
  address: Address
  birthDate: Timestamp
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  metadata: Map
  note: String!
  preferredLanguage: String!
  profileImage: GalleryItem
  tag: [String!]!
  telephones: [String!]!
  timezone: String!
  userId: String!
}

enum CustomerInformation {
  ADDRESS
  CITY_STATE
  EMAIL
  FIRST_NAME
  LAST_NAME
  MOBILE_NUMBER
  UNSPECIFIED_INFO
  ZIP
}

input CustomerInput {
  address: AddressInput
  birthDate: Timestamp
  email: String
  firstName: String
  id: ID
  lastName: String
  metadata: Map
  note: String
  preferredLanguage: String
  profileImage: GalleryItemInput
  tag: [String]
  telephones: [String]
  timezone: String
  userId: String
}

type CustomerNode {
  node: Customer
  position: String!
}

enum CustomerPaymentStatus {
  AUTHORIZED
  PAID
  PARTIAL
  PARTIAL_GC
  REFUNDED
  UNPAID
}

type CustomerRestriction {
  allowedBookingsInDuration: Int!
  frequency: Frequency!
  interval: Dateslot
  type: CustomerRestrictionType!
}

enum CustomerRestrictionType {
  ALLOWED
  CUSTOM
  NOT_ALLOWED
}

enum CustomerStatus {
  CANCELLED
  CONFIRMED
  CUSTOMER_STATUS_UNSPECIFIED
  NO_SHOW
}

type Dateslot {
  endTime: Timestamp
  startTime: Timestamp
}

input DeleteAppointmentInput {
  clientMutationId: String
  id: String
}

type DeleteAppointmentPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteBlockHourRuleInput {
  blockHourRuleId: String
  clientMutationId: String
  slotIds: [String]
}

type DeleteBlockHourRulePayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteCategoryInput {
  clientMutationId: String
  id: String
}

type DeleteCategoryPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteChannelInput {
  clientMutationId: String
  id: String
}

type DeleteChannelPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteCompanyInput {
  clientMutationId: String
  id: String
}

type DeleteCompanyPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteCustomerInput {
  clientMutationId: String
  id: String
}

type DeleteCustomerPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteDepartmentInput {
  clientMutationId: String
  id: String
}

type DeleteDepartmentPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteDesignationInput {
  clientMutationId: String
  id: String
}

type DeleteDesignationPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteGroupInput {
  clientMutationId: String
  id: String
}

type DeleteGroupPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteLocationInput {
  clientMutationId: String
  id: String
}

type DeleteLocationPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteResourceInput {
  clientMutationId: String
  id: String
}

type DeleteResourcePayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteResourceTypeInput {
  clientMutationId: String
  id: String
}

type DeleteResourceTypePayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteServiceInput {
  clientMutationId: String
  id: String
}

type DeleteServicePayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteServiceProviderDraftInput {
  clientMutationId: String
  id: String
}

type DeleteServiceProviderDraftPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteServiceProviderInput {
  clientMutationId: String
  id: String
}

type DeleteServiceProviderPayload {
  clientMutationId: String!
  payload: Empty
}

input DeleteUserProfileInput {
  clientMutationId: String
  id: String
}

type DeleteUserProfilePayload {
  clientMutationId: String!
  payload: Empty
}

type Department implements Node {
  description: String!
  id: ID!
  metadata: Map
  name: String!
}

input DepartmentInput {
  description: String
  id: ID
  metadata: Map
  name: String
}

type Designation implements Node {
  description: String!
  id: ID!
  metadata: Map
  name: String!
}

input DesignationInput {
  description: String
  id: ID
  metadata: Map
  name: String
}

enum DraftStatus {
  APPROVED
  REJECTED
  UNSPECIFIED
}

scalar Duration

type Employee implements Node {
  department: Department
  departmentId: String!
  designation: Designation
  designationId: String!
  email: String!
  employeeNumber: String!
  firstName: String!
  gender: Gender!
  hireDate: Timestamp
  id: ID!
  lastName: String!
  metadata: Map
  phoneNumber: String!
  profileImage: GalleryItem
}

scalar Empty

type FieldMask {
  paths: [String!]!
}

input FieldMaskInput {
  paths: [String]
}

enum Frequency {
  DAILY
  MONTHLY
  ONCE
  WEEKLY
  YEARLY
}

type Gallery {
  default: GalleryItem
  images: [GalleryItem!]!
}

input GalleryInput {
  default: GalleryItemInput
  images: [GalleryItemInput]
}

type GalleryItem {
  largeImage: String!
  thumbImage: String!
}

input GalleryItemInput {
  largeImage: String
  thumbImage: String
}

enum Gender {
  FEMALE
  MALE
  UNSPECIFIED
}

type Group implements Node {
  appointments(
    after: String
    before: String
    first: Int
    last: Int
  ): ListAppointmentResponse
  companies: [Company!]!
  description: String!
  id: ID!
  name: String!
  services(
    after: String
    before: String
    first: Int
    last: Int
  ): ListServiceResponse
}

input GroupInput {
  description: String
  id: ID
  name: String
}

type LeadAndCancellationSetting {
  minAdvancePeriodToBookAppointment: Int!
  minAdvancePeriodToCancelAppointment: Int!
  minAdvancePeriodToRescheduleAppointment: Int!
  minTimeIntervalBetweenAppointment: Int!
  timeAdvanceAppointmentCanBeBooked: Int!
}

input listAppointmentBetweenDurationRequestCustomerId {
  customerId: String
}

input listAppointmentBetweenDurationRequestOnlyUseTimeDuration {
  onlyUseTimeDuration: Boolean
}

input listAppointmentBetweenDurationRequestParent {
  parent: String
}

input listAppointmentBetweenDurationRequestServiceProviderId {
  serviceProviderId: String
}

input listAppointmentRequestCustomerId {
  customerId: String
}

input listAppointmentRequestParent {
  parent: String
}

input listAppointmentRequestServiceProviderId {
  serviceProviderId: String
}

type ListAppointmentResponse {
  nodes: [AppointmentNode!]!
  pageInfo: PageInfo
}

input listBlockHourRuleBetweenDurationRequestParent {
  parent: String
}

input listBlockHourRuleBetweenDurationRequestResourceId {
  resourceId: String
}

type ListBlockHourRuleBetweenDurationResponse {
  blockHours: [BlockHourRule!]!
}

input listBlockHourRuleRequestParent {
  parent: String
}

input listBlockHourRuleRequestResourceId {
  resourceId: String
}

type ListBlockHourRuleResponse {
  nodes: [BlockHourRuleNode!]!
  pageInfo: PageInfo
}

type ListCategoryResponse {
  category: [Category!]!
}

type ListChannelResponse {
  channel: [Channel!]!
  pageInfo: PageInfo
}

type ListCompanyResponse {
  nodes: [CompanyNode!]!
  pageInfo: PageInfo
}

type ListCustomerResponse {
  nodes: [CustomerNode!]!
  pageInfo: PageInfo
}

type ListDepartmentResponse {
  department: [Department!]!
}

type ListDesignationResponse {
  designation: [Designation!]!
}

type ListGroupResponse {
  group: [Group!]!
}

type ListLocationResponse {
  nodes: [LocationNode!]!
  pageInfo: PageInfo
}

type ListResourceResponse {
  edges: [ResourceNode!]!
  pageInfo: PageInfo
}

type ListResourceTypeResponse {
  resourceType: [ResourceType!]!
}

type ListServiceProviderDraftResponse {
  nodes: [ServiceProviderDraftNode!]!
  pageInfo: PageInfo
}

type ListServiceProviderResponse {
  nodes: [ServiceProviderNode!]!
  pageInfo: PageInfo
}

type ListServiceResponse {
  edges: [ServiceNode!]!
  pageInfo: PageInfo
}

type LocalisedTemplateContent {
  body: String!
  id: ID!
  locale: String!
  subject: String!
}

type Location implements Node {
  address: Address
  appointments(
    after: String
    before: String
    first: Int
    last: Int
  ): ListAppointmentResponse
  channels: [Channel!]!
  customers(
    after: String
    before: String
    first: Int
    last: Int
  ): ListCustomerResponse
  description: String!
  gallery: Gallery
  id: ID!
  name: String!
  preference: LocationPreference
  resources(
    after: String
    before: String
    first: Int
    last: Int
  ): ListResourceResponse
  serviceProviders: [ServiceProvider!]!
  services(
    after: String
    before: String
    first: Int
    last: Int
  ): ListServiceResponse
  telephones: [String!]!
}

input LocationInput {
  address: AddressInput
  description: String
  gallery: GalleryInput
  id: ID
  name: String
  preference: LocationPreferenceInput
  telephones: [String]
}

type LocationNode {
  node: Location
  position: String!
}

type LocationPreference {
  currency: String!
  dateFormat: String!
  id: ID!
  language: String!
  timeFormat: String!
  timezone: String!
  uIInfo: String!
}

input LocationPreferenceInput {
  currency: String
  dateFormat: String
  id: ID
  language: String
  timeFormat: String
  timezone: String
  uIInfo: String
}

scalar Map

type ModuleRole implements Node {
  displayName: String!
  id: ID!
  pattern: [String!]!
  serviceName: String!
}

type Mutation {
  createAppointment(input: CreateAppointmentInput): CreateAppointmentPayload
  createBlockHourRule(
    input: CreateBlockHourRuleInput
  ): CreateBlockHourRulePayload
  createCategory(input: CreateCategoryInput): CreateCategoryPayload
  createChannel(input: CreateChannelInput): CreateChannelPayload
  createCompany(input: CreateCompanyInput): CreateCompanyPayload
  createCustomer(input: CreateCustomerInput): CreateCustomerPayload
  createDepartment(input: CreateDepartmentInput): CreateDepartmentPayload
  createDesignation(input: CreateDesignationInput): CreateDesignationPayload
  createGroup(input: CreateGroupInput): CreateGroupPayload
  createLocation(input: CreateLocationInput): CreateLocationPayload
  createResource(input: CreateResourceInput): CreateResourcePayload
  createResourceType(input: CreateResourceTypeInput): CreateResourceTypePayload
  createService(input: CreateServiceInput): CreateServicePayload
  createServiceProvider(
    input: CreateServiceProviderInput
  ): CreateServiceProviderPayload
  createServiceProviderDraft(
    input: CreateServiceProviderDraftInput
  ): CreateServiceProviderDraftPayload
  createUserProfile(input: CreateUserProfileInput): CreateUserProfilePayload
  deleteAppointment(input: DeleteAppointmentInput): DeleteAppointmentPayload
  deleteBlockHourRule(
    input: DeleteBlockHourRuleInput
  ): DeleteBlockHourRulePayload
  deleteCategory(input: DeleteCategoryInput): DeleteCategoryPayload
  deleteChannel(input: DeleteChannelInput): DeleteChannelPayload
  deleteCompany(input: DeleteCompanyInput): DeleteCompanyPayload
  deleteCustomer(input: DeleteCustomerInput): DeleteCustomerPayload
  deleteDepartment(input: DeleteDepartmentInput): DeleteDepartmentPayload
  deleteDesignation(input: DeleteDesignationInput): DeleteDesignationPayload
  deleteGroup(input: DeleteGroupInput): DeleteGroupPayload
  deleteLocation(input: DeleteLocationInput): DeleteLocationPayload
  deleteResource(input: DeleteResourceInput): DeleteResourcePayload
  deleteResourceType(input: DeleteResourceTypeInput): DeleteResourceTypePayload
  deleteService(input: DeleteServiceInput): DeleteServicePayload
  deleteServiceProvider(
    input: DeleteServiceProviderInput
  ): DeleteServiceProviderPayload
  deleteServiceProviderDraft(
    input: DeleteServiceProviderDraftInput
  ): DeleteServiceProviderDraftPayload
  deleteUserProfile(input: DeleteUserProfileInput): DeleteUserProfilePayload
  updateAppointment(input: UpdateAppointmentInput): UpdateAppointmentPayload
  updateBlockHourRule(
    input: UpdateBlockHourRuleInput
  ): UpdateBlockHourRulePayload
  updateCategory(input: UpdateCategoryInput): UpdateCategoryPayload
  updateChannel(input: UpdateChannelInput): UpdateChannelPayload
  updateCompany(input: UpdateCompanyInput): UpdateCompanyPayload
  updateCustomer(input: UpdateCustomerInput): UpdateCustomerPayload
  updateDepartment(input: UpdateDepartmentInput): UpdateDepartmentPayload
  updateDesignation(input: UpdateDesignationInput): UpdateDesignationPayload
  updateGroup(input: UpdateGroupInput): UpdateGroupPayload
  updateLocation(input: UpdateLocationInput): UpdateLocationPayload
  updateResource(input: UpdateResourceInput): UpdateResourcePayload
  updateResourceType(input: UpdateResourceTypeInput): UpdateResourceTypePayload
  updateService(input: UpdateServiceInput): UpdateServicePayload
  updateServiceProvider(
    input: UpdateServiceProviderInput
  ): UpdateServiceProviderPayload
  updateServiceProviderDraft(
    input: UpdateServiceProviderDraftInput
  ): UpdateServiceProviderDraftPayload
  updateUserProfile(input: UpdateUserProfileInput): UpdateUserProfilePayload
  validateServiceProviderDraft(
    input: ValidateServiceProviderDraftInput
  ): ValidateServiceProviderDraftPayload
}

interface Node {
  id: ID!
}

type NotificationRoleSetting {
  roleId: String!
  sendEmail: Boolean!
  sendEmailBeforeMinutes: Int!
  sendSms: Boolean!
  sendSmsBeforeMinutes: Int!
  sendWebBeforeMinutes: Int!
  sendWebNotification: Boolean!
}

type NotificationSetting {
  mandatory: Boolean!
  notificationId: String!
  notificationType: String!
  roleSettings: [NotificationRoleSetting!]!
}

type OpenHour {
  builtSlots: [OpenHourBuiltSlot!]!
  id: ID!
  recurrenceSet: [String!]!
  slot: Timeslot
  start: Timestamp
  until: Timestamp
}

type OpenHourBuiltSlot {
  bookable: Boolean!
  id: ID!
  recurrenceId: String!
  slot: Timeslot
}

type OpenHourRule implements Node {
  id: ID!
  locale: String!
  metadata: Map
  openHours: [OpenHour!]!
  resourceId: String!
  serviceRestriction: [ServiceRestriction!]!
}

type Order implements Node {
  buyer: OrderBuyer
  id: ID!
  items: [OrderItem!]!
  orderPrice: OrderPrice
  status: OrderStatus!
}

type OrderBuyer {
  id: ID!
}

type OrderItem {
  id: ID!
  orderPrice: OrderPrice
  refundTransactions: [OrderRefundTransaction!]!
  transactions: [OrderTransaction!]!
}

type OrderPrice {
  price: Price
  tax: Price
}

type OrderRefundTransaction {
  amount: Price
  id: ID!
  paymentMethod: PaymentMethod!
}

enum OrderStatus {
  CANCELLED
  CONFIRMED
  DROPPED
  PLACED
  UNSPECIFIED
}

type OrderTransaction {
  amount: Price
  id: ID!
  paymentMethod: PaymentMethod!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

enum PaymentMethod {
  CASH
  DISCOUNT
  MEMBERSHIP
  PACKAGE
  SQUARE
  STRIPE
  UNSPECIFIED_METHOD
}

type Policy implements Node {
  id: ID!
  name: String!
  policyCreatedOn: Timestamp
  policyNumber: String!
  versions: [PolicyVersion!]!
}

type PolicySource {
  id: ID!
}

type PolicyVersion {
  active: Boolean!
  content: String!
  id: ID!
  metadata: Map
  policySource: PolicySource
  policyVersionCreatedOn: Timestamp
  published: Boolean!
  version: Int!
}

type Price {
  amount: Int!
  currency: String!
}

type Protobuf {
  data: Bytes
  typeUrl: String!
}

type Query {
  appointment(id: ID, viewMask: FieldMaskInput): Appointment
  appointments(
    after: String
    before: String
    customerId: listAppointmentRequestCustomerId
    first: Int
    last: Int
    parent: listAppointmentRequestParent
    serviceProviderId: listAppointmentRequestServiceProviderId
    viewMask: FieldMaskInput
  ): ListAppointmentResponse
  appointmentsBetweenDuration(
    after: String
    before: String
    customerId: listAppointmentBetweenDurationRequestCustomerId
    endTime: Timestamp
    first: Int
    last: Int
    onlyUseTimeDuration: listAppointmentBetweenDurationRequestOnlyUseTimeDuration
    parent: listAppointmentBetweenDurationRequestParent
    serviceProviderId: listAppointmentBetweenDurationRequestServiceProviderId
    startTime: Timestamp
    viewMask: FieldMaskInput
  ): ListAppointmentResponse
  blockHourRule(id: ID, viewMask: FieldMaskInput): BlockHourRule
  blockHourRules(
    after: String
    before: String
    first: Int
    last: Int
    parent: listBlockHourRuleRequestParent
    resourceId: listBlockHourRuleRequestResourceId
    viewMask: FieldMaskInput
  ): ListBlockHourRuleResponse
  blockHourRulesBetweenDuration(
    endTime: Timestamp
    parent: listBlockHourRuleBetweenDurationRequestParent
    resourceId: listBlockHourRuleBetweenDurationRequestResourceId
    startTime: Timestamp
    viewMask: FieldMaskInput
  ): ListBlockHourRuleBetweenDurationResponse
  categories(parent: String, viewMask: FieldMaskInput): ListCategoryResponse
  category(id: ID, viewMask: FieldMaskInput): Category
  channel(id: ID, viewMask: FieldMaskInput): Channel
  channels(parent: String, viewMask: FieldMaskInput): ListChannelResponse
  companies(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListCompanyResponse
  company(id: ID, viewMask: FieldMaskInput): Company
  customer(id: ID, viewMask: FieldMaskInput): Customer
  customers(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListCustomerResponse
  department(id: ID, viewMask: FieldMaskInput): Department
  departments(parent: String, viewMask: FieldMaskInput): ListDepartmentResponse
  designation(id: ID, viewMask: FieldMaskInput): Designation
  designations(
    parent: String
    viewMask: FieldMaskInput
  ): ListDesignationResponse
  group(id: ID, viewMask: FieldMaskInput): Group
  groups(id: ID): ListGroupResponse
  location(id: ID, viewMask: FieldMaskInput): Location
  locations(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListLocationResponse
  node(id: ID): Node
  resource(id: ID, viewMask: FieldMaskInput): Resource
  resourceType(id: ID, viewMask: FieldMaskInput): ResourceType
  resourceTypes(
    parent: String
    viewMask: FieldMaskInput
  ): ListResourceTypeResponse
  resources(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListResourceResponse
  searchCustomer(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    query: String
    viewMask: FieldMaskInput
  ): ListCustomerResponse
  searchResource(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    query: String
    viewMask: FieldMaskInput
  ): ListResourceResponse
  searchServiceProvider(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    query: String
    viewMask: FieldMaskInput
  ): ListServiceProviderResponse
  serializeAppointment(
    appointment: AppointmentInput
  ): SerializeAppointmentResponse
  service(id: ID, viewMask: FieldMaskInput): Service
  serviceProvider(id: ID, viewMask: FieldMaskInput): ServiceProvider
  serviceProviderDraft(id: ID, viewMask: FieldMaskInput): ServiceProviderDraft
  serviceProviderDrafts(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListServiceProviderDraftResponse
  serviceProviders(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListServiceProviderResponse
  services(
    after: String
    before: String
    first: Int
    last: Int
    parent: String
    viewMask: FieldMaskInput
  ): ListServiceResponse
  userProfile(id: ID, viewMask: FieldMaskInput): UserProfile
  userProfileByEmail(email: String, viewMask: FieldMaskInput): UserProfile
  viewer: UserProfile
}

type Resource implements Node {
  description: String!
  gallery: Gallery
  id: ID!
  quantity: Int!
  resourceType: ResourceType
  resourceTypeId: String!
  title: String!
}

input ResourceInput {
  description: String
  gallery: GalleryInput
  id: ID
  quantity: Int
  resourceTypeId: String
  title: String
}

type ResourceNode {
  cursor: String!
  node: Resource
}

type ResourceType implements Node {
  description: String!
  id: ID!
  metadata: Map
  name: String!
}

input ResourceTypeInput {
  description: String
  id: ID
  metadata: Map
  name: String
}

type Role implements Node {
  id: ID!
  level: String!
  levelId: String!
  moduleRoleIds: [String!]!
  roleName: String!
}

type SerializeAppointmentResponse {
  value: Protobuf
}

type Service implements Node {
  capacity: Int!
  category: Category
  categoryId: String!
  description: Map
  durations: [Duration!]!
  gallery: Gallery
  id: ID!
  isActive: Boolean!
  metadata: Map
  policyId: String!
  status: Status!
}

type ServiceAvailabilityInterval {
  interval: Int!
  type: ServiceAvailabilityIntervalType!
}

enum ServiceAvailabilityIntervalType {
  CUSTOM_INTERVAL
  PARENT_INTERVAL
  UNSPECIFIED_INTERVAL
}

input ServiceInput {
  capacity: Int
  categoryId: String
  description: Map
  durations: [Duration]
  gallery: GalleryInput
  id: ID
  isActive: Boolean
  metadata: Map
  policyId: String
  status: Status
}

type ServiceNode {
  cursor: String!
  node: Service
}

type ServicePaymentSetting {
  chargeType: ChargeType!
  chargeValue: Float!
}

type ServiceProvider implements Node {
  active: Boolean!
  department: Department
  departmentId: String!
  description: String!
  designation: Designation
  designationId: String!
  email: String!
  firstName: String!
  id: ID!
  internal: Boolean!
  lastName: String!
  metadata: Map
  phoneNumber: String!
  priority: Int!
  profileImage: GalleryItem
  qualifications: [String!]!
}

type ServiceProviderDraft {
  changeMask: FieldMask
  departmentId: String!
  description: String!
  designationId: String!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  metadata: Map
  phoneNumber: String!
  profileImage: GalleryItem
  qualifications: [String!]!
  reason: String!
  serviceProviderId: String!
  status: DraftStatus!
}

input ServiceProviderDraftInput {
  changeMask: FieldMaskInput
  departmentId: String
  description: String
  designationId: String
  email: String
  firstName: String
  id: ID
  lastName: String
  metadata: Map
  phoneNumber: String
  profileImage: GalleryItemInput
  qualifications: [String]
  reason: String
  serviceProviderId: String
  status: DraftStatus
}

type ServiceProviderDraftNode {
  node: ServiceProviderDraft
  position: String!
}

input ServiceProviderInput {
  active: Boolean
  departmentId: String
  description: String
  designationId: String
  email: String
  firstName: String
  id: ID
  internal: Boolean
  lastName: String
  metadata: Map
  phoneNumber: String
  priority: Int
  profileImage: GalleryItemInput
  qualifications: [String]
}

type ServiceProviderNode {
  node: ServiceProvider
  position: String!
}

type ServiceProviderSetting implements Node {
  changeMask: FieldMask
  enableDraft: Boolean!
  id: ID!
  servicesToHide: [String!]!
}

type ServiceRestriction {
  channels: [ChannelRestriction!]!
  id: ID!
  serviceId: String!
}

type ServiceSetting implements Node {
  availabilityInterval: ServiceAvailabilityInterval
  bookingRules: BookingRules
  changeMask: FieldMask
  id: ID!
  notificationSettings: [NotificationSetting!]!
  paymentSetting: ServicePaymentSetting
  taxSetting: TaxSetting
}

type Session {
  cancelReason: String!
  cancelledBy: String!
  cancelledOn: Timestamp
  createdTiming: Timeslot
  customer: [ClassCustomer!]!
  id: ID!
  isRule: Boolean!
  metadata: Map
  oldTiming: Timeslot
  recurrenceId: String!
  serviceProviders: [ClassServiceProvider!]!
  status: SessionStatus!
  timing: Timeslot
  title: String!
  until: Timestamp
}

enum SessionStatus {
  SESSION_BOOKED
  SESSION_CANCELLED
}

enum StaffPrioritization {
  DISPLAY_ORDER
  LEAST_OCCUPIED_APPOINTMENT
  LEAST_OCCUPIED_TIME
  MAX_OCCUPIED_APPOINTMENT
  MAX_OCCUPIED_TIME
  UNSPECIFIED
}

enum Status {
  EXTERNAL
  INTERNAL
  LINK_ONLY
  UNSPECIFIED
}

type TaxSetting {
  id: ID!
  percentage: Float!
  title: String!
}

type Template implements Node {
  channel: TemplateChannel!
  content: [LocalisedTemplateContent!]!
  description: String!
  id: ID!
  smartyTags: [String!]!
  templateType: TemplateType!
  title: String!
}

enum TemplateChannel {
  CALENDAR
  EMAIL
  SMS
  UNSPECIFIED
}

enum TemplateType {
  Appointment_Confirm
  Appointment_Delete
  Appointment_Reschedule
  Create_Employee
  Create_Open_Hour
  ORDER_CANCEL
  ORDER_CONFIRM
  SIGNUP
  UNKNOWN
}

type Timeslot {
  endTime: Timestamp
  startTime: Timestamp
}

input TimeslotInput {
  endTime: Timestamp
  startTime: Timestamp
}

scalar Timestamp

input UpdateAppointmentInput {
  appointment: AppointmentInput
  clientMutationId: String
}

type UpdateAppointmentPayload {
  clientMutationId: String!
  payload: Appointment
}

input UpdateBlockHourRuleInput {
  blockHourRule: BlockHourRuleInput
  clientMutationId: String
  updateMask: FieldMaskInput
}

type UpdateBlockHourRulePayload {
  clientMutationId: String!
  payload: BlockHourRule
}

input UpdateCategoryInput {
  category: CategoryInput
  clientMutationId: String
  updateMask: FieldMaskInput
}

type UpdateCategoryPayload {
  clientMutationId: String!
  payload: Category
}

input UpdateChannelInput {
  channel: ChannelInput
  clientMutationId: String
  updateMask: FieldMaskInput
}

type UpdateChannelPayload {
  clientMutationId: String!
  payload: Channel
}

input UpdateCompanyInput {
  clientMutationId: String
  company: CompanyInput
  updateMask: FieldMaskInput
}

type UpdateCompanyPayload {
  clientMutationId: String!
  payload: Company
}

input UpdateCustomerInput {
  clientMutationId: String
  customer: CustomerInput
  updateMask: FieldMaskInput
}

type UpdateCustomerPayload {
  clientMutationId: String!
  payload: Customer
}

input UpdateDepartmentInput {
  clientMutationId: String
  department: DepartmentInput
  updateMask: FieldMaskInput
}

type UpdateDepartmentPayload {
  clientMutationId: String!
  payload: Department
}

input UpdateDesignationInput {
  clientMutationId: String
  designation: DesignationInput
  updateMask: FieldMaskInput
}

type UpdateDesignationPayload {
  clientMutationId: String!
  payload: Designation
}

input UpdateGroupInput {
  clientMutationId: String
  group: GroupInput
  updateMask: FieldMaskInput
}

type UpdateGroupPayload {
  clientMutationId: String!
  payload: Group
}

input UpdateLocationInput {
  clientMutationId: String
  location: LocationInput
  updateMask: FieldMaskInput
}

type UpdateLocationPayload {
  clientMutationId: String!
  payload: Location
}

input UpdateResourceInput {
  clientMutationId: String
  resource: ResourceInput
  updateMask: FieldMaskInput
}

type UpdateResourcePayload {
  clientMutationId: String!
  payload: Resource
}

input UpdateResourceTypeInput {
  clientMutationId: String
  resourceType: ResourceTypeInput
  updateMask: FieldMaskInput
}

type UpdateResourceTypePayload {
  clientMutationId: String!
  payload: ResourceType
}

input UpdateServiceInput {
  clientMutationId: String
  service: ServiceInput
  updateMask: FieldMaskInput
}

type UpdateServicePayload {
  clientMutationId: String!
  payload: Service
}

input UpdateServiceProviderDraftInput {
  clientMutationId: String
  serviceProviderDraft: ServiceProviderDraftInput
  updateMask: FieldMaskInput
}

type UpdateServiceProviderDraftPayload {
  clientMutationId: String!
  payload: ServiceProviderDraft
}

input UpdateServiceProviderInput {
  clientMutationId: String
  serviceProvider: ServiceProviderInput
  updateMask: FieldMaskInput
}

type UpdateServiceProviderPayload {
  clientMutationId: String!
  payload: ServiceProvider
}

input UpdateUserProfileInput {
  clientMutationId: String
  updateMask: FieldMaskInput
  userProfile: UserProfileInput
}

type UpdateUserProfilePayload {
  clientMutationId: String!
  payload: UserProfile
}

type UserPreference {
  dateFormat: String!
  id: ID!
  language: String!
  timeFormat: String!
  timezone: String!
  uIInfo: String!
}

input UserPreferenceInput {
  dateFormat: String
  id: ID
  language: String
  timeFormat: String
  timezone: String
  uIInfo: String
}

type UserProfile implements Node {
  address: Address
  birthDate: Timestamp
  email: String!
  firstName: String!
  gender: Gender!
  groups: [Group!]!
  id: ID!
  lastName: String!
  preferences: UserPreference
  profileImage: GalleryItem
  telephones: [String!]!
  verifiedMask: FieldMask
}

input UserProfileInput {
  address: AddressInput
  birthDate: Timestamp
  email: String
  firstName: String
  gender: Gender
  id: ID
  lastName: String
  preferences: UserPreferenceInput
  profileImage: GalleryItemInput
  telephones: [String]
  verifiedMask: FieldMaskInput
}

input ValidateServiceProviderDraftInput {
  clientMutationId: String
  id: String
  reason: String
  status: DraftStatus
}

type ValidateServiceProviderDraftPayload {
  clientMutationId: String!
  payload: Empty
}


interface Rohit{
 name : String
}

interface Rohan{
 age : Int
}

type Khati implements Rohit & Rohan{
    name : String
    age: Int
    surname: String
}